============================= test session starts ==============================
platform darwin -- Python 3.10.1, pytest-6.2.5, py-1.11.0, pluggy-1.0.0 -- /Users/johnkyle/Desktop/Michigan/EECS/485/p2-insta485-serverside/env/bin/python3
cachedir: .pytest_cache
rootdir: /Users/johnkyle/Desktop/Michigan/EECS/485/p2-insta485-serverside
plugins: mock-3.7.0
collecting ... collected 48 items

tests/test_accounts_public.py::test_accounts_create FAILED               [  2%]
tests/test_accounts_public.py::test_accounts_edit FAILED                 [  4%]
tests/test_accounts_public.py::test_accounts_password FAILED             [  6%]
tests/test_accounts_public.py::test_accounts_delete FAILED               [  8%]
tests/test_accounts_public.py::test_accounts_uploads_permission FAILED   [ 10%]
tests/test_database_public.py::test_sql_schema PASSED                    [ 12%]
tests/test_database_public.py::test_likeids PASSED                       [ 14%]
tests/test_database_public.py::test_posts_autoincrement PASSED           [ 16%]
tests/test_database_public.py::test_sql_data_users_posts PASSED          [ 18%]
tests/test_explore.py::test_awdeorio_default FAILED                      [ 20%]
tests/test_explore.py::test_follow FAILED                                [ 22%]
tests/test_explore.py::test_empty FAILED                                 [ 25%]
tests/test_followers_public.py::test_awdeorio_followers FAILED           [ 27%]
tests/test_followers_public.py::test_files FAILED                        [ 29%]
tests/test_followers_public.py::test_unfollow FAILED                     [ 31%]
tests/test_followers_public.py::test_follow FAILED                       [ 33%]
tests/test_following.py::test_awdeorio FAILED                            [ 35%]
tests/test_following.py::test_unfollow FAILED                            [ 37%]
tests/test_following.py::test_not_following FAILED                       [ 39%]
tests/test_index.py::test_images FAILED                                  [ 41%]
tests/test_index.py::test_links FAILED                                   [ 43%]
tests/test_index.py::test_likes FAILED                                   [ 45%]
tests/test_index.py::test_timestamps FAILED                              [ 47%]
tests/test_index.py::test_comments FAILED                                [ 50%]
tests/test_login_logout.py::test_index_redirect FAILED                   [ 52%]
tests/test_login_logout.py::test_login_page_content FAILED               [ 54%]
tests/test_login_logout.py::test_login FAILED                            [ 56%]
tests/test_login_logout.py::test_logout FAILED                           [ 58%]
tests/test_post_public.py::test_postid_1 FAILED                          [ 60%]
tests/test_post_public.py::test_postid_2 FAILED                          [ 62%]
tests/test_post_public.py::test_zero_likes_english FAILED                [ 64%]
tests/test_post_public.py::test_delete_comment FAILED                    [ 66%]
tests/test_post_public.py::test_like_unlike FAILED                       [ 68%]
tests/test_post_public.py::test_duplicate_like_unlike FAILED             [ 70%]
tests/test_post_public.py::test_comment FAILED                           [ 72%]
tests/test_post_public.py::test_delete_post FAILED                       [ 75%]
tests/test_scripts.py::test_insta485db_destroy PASSED                    [ 77%]
tests/test_scripts.py::test_insta485db_create PASSED                     [ 79%]
tests/test_scripts.py::test_insta485db_reset PASSED                      [ 81%]
tests/test_scripts.py::test_insta485db_dump PASSED                       [ 83%]
tests/test_scripts.py::test_insta485run FAILED                           [ 85%]
tests/test_scripts.py::test_insta485test PASSED                          [ 87%]
tests/test_style.py::test_pycodestyle FAILED                             [ 89%]
tests/test_style.py::test_pydocstyle FAILED                              [ 91%]
tests/test_style.py::test_pylint FAILED                                  [ 93%]
tests/test_style.py::test_html FAILED                                    [ 95%]
tests/test_user_public.py::test_awdeorio FAILED                          [ 97%]
tests/test_user_public.py::test_upload FAILED                            [100%]

=================================== FAILURES ===================================
_____________________________ test_accounts_create _____________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_accounts_create(client):
        """Create an account and verify that we've got a new empty user.
    
        Note: 'client' is a fixture fuction that provides a Flask test server
        interface with a clean database.  It is implemented in conftest.py and
        reused by many tests.  Docs: https://docs.pytest.org/en/latest/fixture.html
        """
        # Connect to the database
        connection = sqlite3.connect("var/insta485.sqlite3")
        connection.execute("PRAGMA foreign_keys = ON")
    
        # Number of posts and users before adding a user
        cur = connection.execute("SELECT COUNT(*) from users")
        num_users_before = cur.fetchone()[0]
        cur = connection.execute("SELECT COUNT(*) from posts")
        num_posts_before = cur.fetchone()[0]
    
        # Add a user
        avatar_path = utils.TEST_DIR/"testdata/fox.jpg"
        with avatar_path.open('rb') as avatar:
            query_string = urlencode({"target": "/"})
>           response = client.post(
                f"/accounts/?{query_string}",
                data={
                    "username": "fakeuser", "fullname": "Fake User",
                    "email": "fakeuser@umich.edu",
                    "password": "password",
                    "file": avatar,
                    "operation": "create"
                }
            )

tests/test_accounts_public.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
______________________________ test_accounts_edit ______________________________

client = <FlaskClient <Flask 'insta485'>>
mocker = <pytest_mock.plugin.MockerFixture object at 0x111867b50>

    def test_accounts_edit(client, mocker):
        """Change name, email and photo.
    
        Note: 'client' is a fixture fuction that provides a Flask test server
        interface with a clean database.  It is implemented in conftest.py and
        reused by many tests.  Docs: https://docs.pytest.org/en/latest/fixture.html
    
        Note: 'mocker' is a fixture function provided the the pytest-mock package.
        This fixture lets us override a library function with a temporary fake
        function that returns a hardcoded value while testing.
        """
        # Fake the uuid4() function to return a hardcoded UUID.  We need a
        # predictable value for testing, not a randomly generated value.
        mocker.patch(
            "uuid.uuid4",
            return_value=uuid.UUID("00000000000000000000000000000000"),
        )
    
        # Log in
>       response = client.post(
            "/accounts/",
            data={"username": "awdeorio",
                  "password": "password",
                  "operation": "login"},
        )

tests/test_accounts_public.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
____________________________ test_accounts_password ____________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_accounts_password(client):
        """Change password.  Logout and login again.
    
        Note: 'client' is a fixture fuction that provides a Flask test server
        interface with a clean database.  It is implemented in conftest.py and
        reused by many tests.  Docs: https://docs.pytest.org/en/latest/fixture.html
        """
        # Log in
>       response = client.post(
            "/accounts/",
            data={"username": "awdeorio",
                  "password": "password",
                  "operation": "login"},
        )

tests/test_accounts_public.py:167: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
_____________________________ test_accounts_delete _____________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_accounts_delete(client):
        """Delete account and verify that everything is gone.
    
        Note: 'client' is a fixture fuction that provides a Flask test server
        interface with a clean database.  It is implemented in conftest.py and
        reused by many tests.  Docs: https://docs.pytest.org/en/latest/fixture.html
        """
        # Log in
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_accounts_public.py:226: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
_______________________ test_accounts_uploads_permission _______________________

client = <FlaskClient <Flask 'insta485'>>

    def test_accounts_uploads_permission(client):
        """Verify that only authenticated users can see uploads.
    
        Note: 'client' is a fixture fuction that provides a Flask test server
        interface with a clean database.  It is implemented in conftest.py and
        reused by many tests.  Docs: https://docs.pytest.org/en/latest/fixture.html
        """
        response = client.get(
            "/uploads/122a7d27ca1d7420a1072f695d9290fad4501a41.jpg"
        )
>       assert response.status_code == 403
E       assert 404 == 403
E         +404
E         -403

tests/test_accounts_public.py:310: AssertionError
____________________________ test_awdeorio_default _____________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_awdeorio_default(client):
        """Verify default content at /explore/ with awdeorio logged in."""
        # Login
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_explore.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
_________________________________ test_follow __________________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_follow(client):
        """Click follow, then check /users/<user_url_slug>/following/ ."""
        # Login
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_explore.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
__________________________________ test_empty __________________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_empty(client):
        """Nobody shows up when you're following everyone."""
        # Login
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_explore.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
___________________________ test_awdeorio_followers ____________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_awdeorio_followers(client):
        """Check default content at /users/awdeorio/followers/ URL."""
        # Log in
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_followers_public.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
__________________________________ test_files __________________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_files(client):
        """Verify all expected files exist."""
        # Log in
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_followers_public.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
________________________________ test_unfollow _________________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_unfollow(client):
        """Click unfollow.  Verify user is removed."""
        # Log in
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_followers_public.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
_________________________________ test_follow __________________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_follow(client):
        """Click follow.  Verify user is added."""
        # Log in
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_followers_public.py:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
________________________________ test_awdeorio _________________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_awdeorio(client):
        """Check default content at /users/awdeorio/following/ URL."""
        # Login
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_following.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
________________________________ test_unfollow _________________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_unfollow(client):
        """Click unfollow.  Verify user is removed."""
        # Log in
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_following.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
______________________________ test_not_following ______________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_not_following(client):
        """User can like/comment on posts by people they are not following."""
        # Log in
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_following.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
_________________________________ test_images __________________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_images(client):
        """Verify all images are present in / URL.
    
        Note: 'client' is a fixture fuction that provides a Flask test server
        interface with a clean database.  It is implemented in conftest.py and
        reused by many tests.  Docs: https://docs.pytest.org/en/latest/fixture.html
        """
        # Log in
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_index.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
__________________________________ test_links __________________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_links(client):
        """Verify expected links present in / URL.
    
        Note: 'client' is a fixture fuction that provides a Flask test server
        interface with a clean database.  It is implemented in conftest.py and
        reused by many tests.  Docs: https://docs.pytest.org/en/latest/fixture.html
        """
        # Log in
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_index.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
__________________________________ test_likes __________________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_likes(client):
        """Verify expected "likes" are present in / URL.
    
        Note: 'client' is a fixture fuction that provides a Flask test server
        interface with a clean database.  It is implemented in conftest.py and
        reused by many tests.  Docs: https://docs.pytest.org/en/latest/fixture.html
        """
        # Log in
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_index.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
_______________________________ test_timestamps ________________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_timestamps(client):
        """Verify expected timestamps are present in / URL.
    
        Note: 'client' is a fixture fuction that provides a Flask test server
        interface with a clean database.  It is implemented in conftest.py and
        reused by many tests.  Docs: https://docs.pytest.org/en/latest/fixture.html
        """
        # Log in
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_index.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
________________________________ test_comments _________________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_comments(client):
        """Verify expected comments are present in / URL.
    
        Note: 'client' is a fixture fuction that provides a Flask test server
        interface with a clean database.  It is implemented in conftest.py and
        reused by many tests.  Docs: https://docs.pytest.org/en/latest/fixture.html
        """
        # Log in
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_index.py:162: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
_____________________________ test_index_redirect ______________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_index_redirect(client):
        """GET / redirects to /accounts/login/ when user is not logged in.
    
        Note: 'client' is a fixture fuction that provides a Flask test server
        interface with a clean database.  It is implemented in conftest.py and
        reused by many tests.  Docs: https://docs.pytest.org/en/latest/fixture.html
        """
        response = client.get("/")
>       assert response.status_code == 302
E       assert 200 == 302
E         +200
E         -302

tests/test_login_logout.py:20: AssertionError
___________________________ test_login_page_content ____________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_login_page_content(client):
        """Verify links and form on /accounts/login/ page.
    
        Note: 'client' is a fixture fuction that provides a Flask test server
        interface with a clean database.  It is implemented in conftest.py and
        reused by many tests.  Docs: https://docs.pytest.org/en/latest/fixture.html
        """
        response = client.get("/accounts/login/")
>       assert response.status_code == 200
E       assert 405 == 200
E         +405
E         -200

tests/test_login_logout.py:33: AssertionError
__________________________________ test_login __________________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_login(client):
        """Login awdeorio.
    
        Note: 'client' is a fixture fuction that provides a Flask test server
        interface with a clean database.  It is implemented in conftest.py and
        reused by many tests.  Docs: https://docs.pytest.org/en/latest/fixture.html
        """
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_login_logout.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
_________________________________ test_logout __________________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_logout(client):
        """Logout after log in.
    
        Note: 'client' is a fixture fuction that provides a Flask test server
        interface with a clean database.  It is implemented in conftest.py and
        reused by many tests.  Docs: https://docs.pytest.org/en/latest/fixture.html
        """
        # Login
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_login_logout.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
________________________________ test_postid_1 _________________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_postid_1(client):
        """Check default content at /posts/1/ URL."""
        # Log in
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_post_public.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
________________________________ test_postid_2 _________________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_postid_2(client):
        """Check default content at /posts/2/ URL."""
        # Log in
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_post_public.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
___________________________ test_zero_likes_english ____________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_zero_likes_english(client):
        """Check zero likes english at /posts/4/ URL."""
        # Log in
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_post_public.py:179: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
_____________________________ test_delete_comment ______________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_delete_comment(client):
        """Delete comment and verify that it dissapears here and at index."""
        # Log in
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_post_public.py:204: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
_______________________________ test_like_unlike _______________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_like_unlike(client):
        """Like and dislike post."""
        # Log in
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_post_public.py:232: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
__________________________ test_duplicate_like_unlike __________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_duplicate_like_unlike(client):
        """Like and dislike post multiple times."""
        # Log in
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_post_public.py:266: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
_________________________________ test_comment _________________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_comment(client):
        """Comment on a post.  Make sure comments are present."""
        # Log in
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_post_public.py:314: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
_______________________________ test_delete_post _______________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_delete_post(client):
        """Delete post.  Make sure comments are gone and photo deleted."""
        # Log in
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_post_public.py:360: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
_______________________________ test_insta485run _______________________________

setup_teardown = None, client = <FlaskClient <Flask 'insta485'>>

    def test_insta485run(setup_teardown, client):
        """Verify insta485run script behavior."""
        assert not port_in_use(PORT_NUM), \
            f'Found running process on port {PORT_NUM}.'
    
        # Destroy database
        subprocess.run(["bin/insta485db", "destroy"], check=True)
    
        # Execute student run script in a concurrent thread.  Don't check the
        # return code because test cleanup will kill the process
        assert_is_shell_script("bin/insta485run")
        thread = threading.Thread(
            target=subprocess.run,
            args=(["bin/insta485run"],),
            kwargs={"check": False},
        )
        thread.start()
    
        # Wait for server to start
        assert wait_for_start()
    
        # Verify that database is now created
        assert os.path.exists("var/insta485.sqlite3")
    
        # Verify that server correctly serves content
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_scripts.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
----------------------------- Captured stdout call -----------------------------
 * Serving Flask app 'insta485' (lazy loading)
 * Environment: development
 * Debug mode: on
----------------------------- Captured stderr call -----------------------------
 * Running on all addresses.
   WARNING: This is a development server. Do not use it in a production deployment.
 * Running on http://192.168.131.65:8000/ (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 144-928-653
_______________________________ test_pycodestyle _______________________________

    def test_pycodestyle():
        """Run pycodestyle."""
        assert_no_prohibited_terms("nopep8", "noqa", "pylint")
>       subprocess.run(["pycodestyle", "setup.py", "insta485"], check=True)

tests/test_style.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = None, capture_output = False, timeout = None, check = True
popenargs = (['pycodestyle', 'setup.py', 'insta485'],), kwargs = {}
process = <Popen: returncode: 1 args: ['pycodestyle', 'setup.py', 'insta485']>
stdout = None, stderr = None, retcode = 1

    def run(*popenargs,
            input=None, capture_output=False, timeout=None, check=False, **kwargs):
        """Run command with arguments and return a CompletedProcess instance.
    
        The returned instance will have attributes args, returncode, stdout and
        stderr. By default, stdout and stderr are not captured, and those attributes
        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.
    
        If check is True and the exit code was non-zero, it raises a
        CalledProcessError. The CalledProcessError object will have the return code
        in the returncode attribute, and output & stderr attributes if those streams
        were captured.
    
        If timeout is given, and the process takes too long, a TimeoutExpired
        exception will be raised.
    
        There is an optional argument "input", allowing you to
        pass bytes or a string to the subprocess's stdin.  If you use this argument
        you may not also use the Popen constructor's "stdin" argument, as
        it will be used internally.
    
        By default, all communication is in bytes, and therefore any "input" should
        be bytes, and the stdout and stderr will be bytes. If in text mode, any
        "input" should be a string, and stdout and stderr will be strings decoded
        according to locale encoding, or by "encoding" if set. Text mode is
        triggered by setting any of text, encoding, errors or universal_newlines.
    
        The other arguments are the same as for the Popen constructor.
        """
        if input is not None:
            if kwargs.get('stdin') is not None:
                raise ValueError('stdin and input arguments may not both be used.')
            kwargs['stdin'] = PIPE
    
        if capture_output:
            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:
                raise ValueError('stdout and stderr arguments may not be used '
                                 'with capture_output.')
            kwargs['stdout'] = PIPE
            kwargs['stderr'] = PIPE
    
        with Popen(*popenargs, **kwargs) as process:
            try:
                stdout, stderr = process.communicate(input, timeout=timeout)
            except TimeoutExpired as exc:
                process.kill()
                if _mswindows:
                    # Windows accumulates the output in a single blocking
                    # read() call run on child threads, with the timeout
                    # being done in a join() on those threads.  communicate()
                    # _after_ kill() is required to collect that and add it
                    # to the exception.
                    exc.stdout, exc.stderr = process.communicate()
                else:
                    # POSIX _communicate already populated the output so
                    # far into the TimeoutExpired exception.
                    process.wait()
                raise
            except:  # Including KeyboardInterrupt, communicate handled that.
                process.kill()
                # We don't call process.wait() as .__exit__ does that for us.
                raise
            retcode = process.poll()
            if check and retcode:
>               raise CalledProcessError(retcode, process.args,
                                         output=stdout, stderr=stderr)
E               subprocess.CalledProcessError: Command '['pycodestyle', 'setup.py', 'insta485']' returned non-zero exit status 1.

/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/subprocess.py:524: CalledProcessError
----------------------------- Captured stdout call -----------------------------
insta485/__init__.py:5:80: E501 line too long (88 > 79 characters)
insta485/model.py:45:26: W292 no newline at end of file
insta485/views/__init__.py:2:44: W292 no newline at end of file
insta485/views/index.py:15:12: W291 trailing whitespace
insta485/views/index.py:18:1: E302 expected 2 blank lines, found 1
insta485/views/index.py:25:1: E302 expected 2 blank lines, found 1
insta485/views/index.py:34:1: E302 expected 2 blank lines, found 1
insta485/views/index.py:41:21: E203 whitespace before ':'
insta485/views/index.py:41:80: E501 line too long (109 > 79 characters)
insta485/views/index.py:43:1: E302 expected 2 blank lines, found 1
insta485/views/index.py:51:1: E302 expected 2 blank lines, found 1
insta485/views/index.py:74:80: E501 line too long (134 > 79 characters)
insta485/views/index.py:77:22: E231 missing whitespace after ','
insta485/views/index.py:80:49: E231 missing whitespace after ','
insta485/views/index.py:88:29: E203 whitespace before ':'
insta485/views/index.py:89:28: E203 whitespace before ':'
insta485/views/index.py:90:36: E203 whitespace before ':'
insta485/views/index.py:90:80: E501 line too long (93 > 79 characters)
insta485/views/index.py:91:30: E203 whitespace before ':'
insta485/views/index.py:91:80: E501 line too long (87 > 79 characters)
insta485/views/index.py:92:32: E203 whitespace before ':'
insta485/views/index.py:92:80: E501 line too long (89 > 79 characters)
insta485/views/index.py:93:28: E203 whitespace before ':'
insta485/views/index.py:94:31: E203 whitespace before ':'
insta485/views/index.py:96:80: E501 line too long (82 > 79 characters)
insta485/views/index.py:104:1: E302 expected 2 blank lines, found 1
insta485/views/index.py:117:17: E231 missing whitespace after ','
insta485/views/index.py:130:80: E501 line too long (90 > 79 characters)
insta485/views/index.py:140:1: E302 expected 2 blank lines, found 1
insta485/views/index.py:145:1: E302 expected 2 blank lines, found 1
insta485/views/index.py:172:1: E302 expected 2 blank lines, found 1
insta485/views/index.py:178:80: E501 line too long (81 > 79 characters)
insta485/views/index.py:199:80: E501 line too long (93 > 79 characters)
insta485/views/index.py:230:80: E501 line too long (125 > 79 characters)
insta485/views/index.py:252:80: E501 line too long (88 > 79 characters)
insta485/views/index.py:287:1: W293 blank line contains whitespace
insta485/views/index.py:298:50: W291 trailing whitespace
insta485/views/index.py:299:80: E501 line too long (89 > 79 characters)
insta485/views/index.py:299:90: W291 trailing whitespace
insta485/views/index.py:300:80: E501 line too long (84 > 79 characters)
insta485/views/index.py:307:1: W293 blank line contains whitespace
insta485/views/index.py:316:5: E303 too many blank lines (2)
insta485/views/index.py:335:50: W291 trailing whitespace
insta485/views/index.py:336:80: E501 line too long (89 > 79 characters)
insta485/views/index.py:336:90: W291 trailing whitespace
insta485/views/index.py:337:80: E501 line too long (85 > 79 characters)
insta485/views/index.py:345:1: E302 expected 2 blank lines, found 1
insta485/views/index.py:349:1: E302 expected 2 blank lines, found 1
insta485/views/index.py:349:80: E501 line too long (80 > 79 characters)
insta485/views/index.py:351:80: E501 line too long (84 > 79 characters)
insta485/views/index.py:353:1: E302 expected 2 blank lines, found 1
insta485/views/index.py:361:1: W293 blank line contains whitespace
insta485/views/index.py:370:80: E501 line too long (103 > 79 characters)
insta485/views/index.py:371:27: E203 whitespace before ':'
insta485/views/index.py:382:80: E501 line too long (89 > 79 characters)
insta485/views/index.py:384:1: W293 blank line contains whitespace
insta485/views/index.py:420:1: W293 blank line contains whitespace
insta485/views/index.py:421:1: W293 blank line contains whitespace
insta485/views/index.py:423:1: E303 too many blank lines (3)
insta485/views/index.py:431:80: E501 line too long (105 > 79 characters)
insta485/views/index.py:435:5: E303 too many blank lines (2)
insta485/views/index.py:441:1: W293 blank line contains whitespace
insta485/views/index.py:448:1: W293 blank line contains whitespace
insta485/views/index.py:450:1: W293 blank line contains whitespace
insta485/views/index.py:469:1: W293 blank line contains whitespace
insta485/views/index.py:481:1: E302 expected 2 blank lines, found 1
insta485/views/index.py:483:1: W293 blank line contains whitespace
insta485/views/index.py:498:1: W293 blank line contains whitespace
insta485/views/index.py:522:20: E231 missing whitespace after ','
insta485/views/index.py:523:17: W291 trailing whitespace
insta485/views/index.py:524:1: W293 blank line contains whitespace
insta485/views/index.py:533:1: W293 blank line contains whitespace
insta485/views/index.py:554:49: W291 trailing whitespace
insta485/views/index.py:562:80: E501 line too long (93 > 79 characters)
insta485/views/index.py:563:80: E501 line too long (89 > 79 characters)
insta485/views/index.py:594:1: E302 expected 2 blank lines, found 1
insta485/views/index.py:598:47: W292 no newline at end of file
_______________________________ test_pydocstyle ________________________________

    def test_pydocstyle():
        """Run pydocstyle."""
        assert_no_prohibited_terms("nopep8", "noqa", "pylint")
>       subprocess.run(["pydocstyle", "setup.py", "insta485"], check=True)

tests/test_style.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = None, capture_output = False, timeout = None, check = True
popenargs = (['pydocstyle', 'setup.py', 'insta485'],), kwargs = {}
process = <Popen: returncode: 1 args: ['pydocstyle', 'setup.py', 'insta485']>
stdout = None, stderr = None, retcode = 1

    def run(*popenargs,
            input=None, capture_output=False, timeout=None, check=False, **kwargs):
        """Run command with arguments and return a CompletedProcess instance.
    
        The returned instance will have attributes args, returncode, stdout and
        stderr. By default, stdout and stderr are not captured, and those attributes
        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.
    
        If check is True and the exit code was non-zero, it raises a
        CalledProcessError. The CalledProcessError object will have the return code
        in the returncode attribute, and output & stderr attributes if those streams
        were captured.
    
        If timeout is given, and the process takes too long, a TimeoutExpired
        exception will be raised.
    
        There is an optional argument "input", allowing you to
        pass bytes or a string to the subprocess's stdin.  If you use this argument
        you may not also use the Popen constructor's "stdin" argument, as
        it will be used internally.
    
        By default, all communication is in bytes, and therefore any "input" should
        be bytes, and the stdout and stderr will be bytes. If in text mode, any
        "input" should be a string, and stdout and stderr will be strings decoded
        according to locale encoding, or by "encoding" if set. Text mode is
        triggered by setting any of text, encoding, errors or universal_newlines.
    
        The other arguments are the same as for the Popen constructor.
        """
        if input is not None:
            if kwargs.get('stdin') is not None:
                raise ValueError('stdin and input arguments may not both be used.')
            kwargs['stdin'] = PIPE
    
        if capture_output:
            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:
                raise ValueError('stdout and stderr arguments may not be used '
                                 'with capture_output.')
            kwargs['stdout'] = PIPE
            kwargs['stderr'] = PIPE
    
        with Popen(*popenargs, **kwargs) as process:
            try:
                stdout, stderr = process.communicate(input, timeout=timeout)
            except TimeoutExpired as exc:
                process.kill()
                if _mswindows:
                    # Windows accumulates the output in a single blocking
                    # read() call run on child threads, with the timeout
                    # being done in a join() on those threads.  communicate()
                    # _after_ kill() is required to collect that and add it
                    # to the exception.
                    exc.stdout, exc.stderr = process.communicate()
                else:
                    # POSIX _communicate already populated the output so
                    # far into the TimeoutExpired exception.
                    process.wait()
                raise
            except:  # Including KeyboardInterrupt, communicate handled that.
                process.kill()
                # We don't call process.wait() as .__exit__ does that for us.
                raise
            retcode = process.poll()
            if check and retcode:
>               raise CalledProcessError(retcode, process.args,
                                         output=stdout, stderr=stderr)
E               subprocess.CalledProcessError: Command '['pydocstyle', 'setup.py', 'insta485']' returned non-zero exit status 1.

/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/subprocess.py:524: CalledProcessError
----------------------------- Captured stdout call -----------------------------
insta485/views/index.py:18 in public function `get_salt`:
        D103: Missing docstring in public function
insta485/views/index.py:25 in public function `hash_password`:
        D103: Missing docstring in public function
insta485/views/index.py:34 in public function `get_all_comments`:
        D103: Missing docstring in public function
insta485/views/index.py:43 in public function `get_likes`:
        D103: Missing docstring in public function
insta485/views/index.py:105 in public function `show_explore`:
        D103: Missing docstring in public function
insta485/views/index.py:141 in public function `logout`:
        D103: Missing docstring in public function
insta485/views/index.py:146 in public function `login`:
        D103: Missing docstring in public function
insta485/views/index.py:173 in public function `show_user`:
        D103: Missing docstring in public function
insta485/views/index.py:246 in public function `show_post`:
        D103: Missing docstring in public function
insta485/views/index.py:275 in public function `show_followers`:
        D103: Missing docstring in public function
insta485/views/index.py:310 in public function `show_following`:
        D103: Missing docstring in public function
insta485/views/index.py:346 in public function `follow_unfollow`:
        D103: Missing docstring in public function
insta485/views/index.py:350 in public function `send_file`:
        D103: Missing docstring in public function
insta485/views/index.py:354 in public function `show_edit`:
        D103: Missing docstring in public function
insta485/views/index.py:378 in public function `edit_profile`:
        D103: Missing docstring in public function
insta485/views/index.py:416 in public function `show_password`:
        D103: Missing docstring in public function
insta485/views/index.py:424 in public function `edit_password`:
        D103: Missing docstring in public function
insta485/views/index.py:468 in public function `show_delete`:
        D103: Missing docstring in public function
insta485/views/index.py:482 in public function `delete_account`:
        D103: Missing docstring in public function
insta485/views/index.py:503 in public function `like`:
        D103: Missing docstring in public function
insta485/views/index.py:548 in public function `comment`:
        D103: Missing docstring in public function
insta485/views/index.py:595 in public function `handle_account`:
        D103: Missing docstring in public function
_________________________________ test_pylint __________________________________

    def test_pylint():
        """Run pylint."""
        assert_no_prohibited_terms("nopep8", "noqa", "pylint")
>       subprocess.run([
            "pylint",
            "--rcfile", utils.TEST_DIR/"testdata/pylintrc",
            "--disable=cyclic-import",
            "--disable=assigning-non-slot",
            "--unsafe-load-any-extension=y",
            "setup.py",
            "insta485",
        ], check=True)

tests/test_style.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = None, capture_output = False, timeout = None, check = True
popenargs = (['pylint', '--rcfile', PosixPath('/Users/johnkyle/Desktop/Michigan/EECS/485/p2-insta485-serverside/tests/testdata/pylintrc'), '--disable=cyclic-import', '--disable=assigning-non-slot', '--unsafe-load-any-extension=y', ...],)
kwargs = {}
process = <Popen: returncode: 28 args: ['pylint', '--rcfile', PosixPath('/Users/johnky...>
stdout = None, stderr = None, retcode = 28

    def run(*popenargs,
            input=None, capture_output=False, timeout=None, check=False, **kwargs):
        """Run command with arguments and return a CompletedProcess instance.
    
        The returned instance will have attributes args, returncode, stdout and
        stderr. By default, stdout and stderr are not captured, and those attributes
        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.
    
        If check is True and the exit code was non-zero, it raises a
        CalledProcessError. The CalledProcessError object will have the return code
        in the returncode attribute, and output & stderr attributes if those streams
        were captured.
    
        If timeout is given, and the process takes too long, a TimeoutExpired
        exception will be raised.
    
        There is an optional argument "input", allowing you to
        pass bytes or a string to the subprocess's stdin.  If you use this argument
        you may not also use the Popen constructor's "stdin" argument, as
        it will be used internally.
    
        By default, all communication is in bytes, and therefore any "input" should
        be bytes, and the stdout and stderr will be bytes. If in text mode, any
        "input" should be a string, and stdout and stderr will be strings decoded
        according to locale encoding, or by "encoding" if set. Text mode is
        triggered by setting any of text, encoding, errors or universal_newlines.
    
        The other arguments are the same as for the Popen constructor.
        """
        if input is not None:
            if kwargs.get('stdin') is not None:
                raise ValueError('stdin and input arguments may not both be used.')
            kwargs['stdin'] = PIPE
    
        if capture_output:
            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:
                raise ValueError('stdout and stderr arguments may not be used '
                                 'with capture_output.')
            kwargs['stdout'] = PIPE
            kwargs['stderr'] = PIPE
    
        with Popen(*popenargs, **kwargs) as process:
            try:
                stdout, stderr = process.communicate(input, timeout=timeout)
            except TimeoutExpired as exc:
                process.kill()
                if _mswindows:
                    # Windows accumulates the output in a single blocking
                    # read() call run on child threads, with the timeout
                    # being done in a join() on those threads.  communicate()
                    # _after_ kill() is required to collect that and add it
                    # to the exception.
                    exc.stdout, exc.stderr = process.communicate()
                else:
                    # POSIX _communicate already populated the output so
                    # far into the TimeoutExpired exception.
                    process.wait()
                raise
            except:  # Including KeyboardInterrupt, communicate handled that.
                process.kill()
                # We don't call process.wait() as .__exit__ does that for us.
                raise
            retcode = process.poll()
            if check and retcode:
>               raise CalledProcessError(retcode, process.args,
                                         output=stdout, stderr=stderr)
E               subprocess.CalledProcessError: Command '['pylint', '--rcfile', PosixPath('/Users/johnkyle/Desktop/Michigan/EECS/485/p2-insta485-serverside/tests/testdata/pylintrc'), '--disable=cyclic-import', '--disable=assigning-non-slot', '--unsafe-load-any-extension=y', 'setup.py', 'insta485']' returned non-zero exit status 28.

/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/subprocess.py:524: CalledProcessError
----------------------------- Captured stdout call -----------------------------
************* Module insta485.model
insta485/model.py:45:0: C0304: Final newline missing (missing-final-newline)
************* Module insta485.views.index
insta485/views/index.py:15:11: C0303: Trailing whitespace (trailing-whitespace)
insta485/views/index.py:41:0: C0301: Line too long (109/100) (line-too-long)
insta485/views/index.py:74:0: C0301: Line too long (134/100) (line-too-long)
insta485/views/index.py:230:0: C0301: Line too long (125/100) (line-too-long)
insta485/views/index.py:287:0: C0303: Trailing whitespace (trailing-whitespace)
insta485/views/index.py:298:49: C0303: Trailing whitespace (trailing-whitespace)
insta485/views/index.py:299:89: C0303: Trailing whitespace (trailing-whitespace)
insta485/views/index.py:307:0: C0303: Trailing whitespace (trailing-whitespace)
insta485/views/index.py:335:49: C0303: Trailing whitespace (trailing-whitespace)
insta485/views/index.py:336:89: C0303: Trailing whitespace (trailing-whitespace)
insta485/views/index.py:361:0: C0303: Trailing whitespace (trailing-whitespace)
insta485/views/index.py:370:0: C0301: Line too long (103/100) (line-too-long)
insta485/views/index.py:384:0: C0303: Trailing whitespace (trailing-whitespace)
insta485/views/index.py:420:0: C0303: Trailing whitespace (trailing-whitespace)
insta485/views/index.py:421:0: C0303: Trailing whitespace (trailing-whitespace)
insta485/views/index.py:431:0: C0301: Line too long (105/100) (line-too-long)
insta485/views/index.py:441:0: C0303: Trailing whitespace (trailing-whitespace)
insta485/views/index.py:448:0: C0303: Trailing whitespace (trailing-whitespace)
insta485/views/index.py:450:0: C0303: Trailing whitespace (trailing-whitespace)
insta485/views/index.py:469:0: C0303: Trailing whitespace (trailing-whitespace)
insta485/views/index.py:483:0: C0303: Trailing whitespace (trailing-whitespace)
insta485/views/index.py:498:0: C0303: Trailing whitespace (trailing-whitespace)
insta485/views/index.py:523:16: C0303: Trailing whitespace (trailing-whitespace)
insta485/views/index.py:524:0: C0303: Trailing whitespace (trailing-whitespace)
insta485/views/index.py:533:0: C0303: Trailing whitespace (trailing-whitespace)
insta485/views/index.py:554:48: C0303: Trailing whitespace (trailing-whitespace)
insta485/views/index.py:598:0: C0304: Final newline missing (missing-final-newline)
insta485/views/index.py:18:0: C0116: Missing function or method docstring (missing-function-docstring)
insta485/views/index.py:25:0: C0116: Missing function or method docstring (missing-function-docstring)
insta485/views/index.py:34:0: C0116: Missing function or method docstring (missing-function-docstring)
insta485/views/index.py:43:0: C0116: Missing function or method docstring (missing-function-docstring)
insta485/views/index.py:58:4: R1705: Unnecessary "else" after "return" (no-else-return)
insta485/views/index.py:105:0: C0116: Missing function or method docstring (missing-function-docstring)
insta485/views/index.py:141:0: C0116: Missing function or method docstring (missing-function-docstring)
insta485/views/index.py:146:0: C0116: Missing function or method docstring (missing-function-docstring)
insta485/views/index.py:166:4: R1705: Unnecessary "else" after "return" (no-else-return)
insta485/views/index.py:173:0: C0116: Missing function or method docstring (missing-function-docstring)
insta485/views/index.py:246:0: C0116: Missing function or method docstring (missing-function-docstring)
insta485/views/index.py:275:0: C0116: Missing function or method docstring (missing-function-docstring)
insta485/views/index.py:310:0: C0116: Missing function or method docstring (missing-function-docstring)
insta485/views/index.py:346:0: C0116: Missing function or method docstring (missing-function-docstring)
insta485/views/index.py:347:4: W0612: Unused variable 'target' (unused-variable)
insta485/views/index.py:350:0: C0116: Missing function or method docstring (missing-function-docstring)
insta485/views/index.py:354:0: C0116: Missing function or method docstring (missing-function-docstring)
insta485/views/index.py:378:0: C0116: Missing function or method docstring (missing-function-docstring)
insta485/views/index.py:416:0: C0116: Missing function or method docstring (missing-function-docstring)
insta485/views/index.py:424:0: C0116: Missing function or method docstring (missing-function-docstring)
insta485/views/index.py:468:0: C0116: Missing function or method docstring (missing-function-docstring)
insta485/views/index.py:482:0: C0116: Missing function or method docstring (missing-function-docstring)
insta485/views/index.py:503:0: C0116: Missing function or method docstring (missing-function-docstring)
insta485/views/index.py:525:4: R1705: Unnecessary "elif" after "return" (no-else-return)
insta485/views/index.py:512:4: W0612: Unused variable 'post_info' (unused-variable)
insta485/views/index.py:548:0: C0116: Missing function or method docstring (missing-function-docstring)
insta485/views/index.py:595:0: C0116: Missing function or method docstring (missing-function-docstring)
insta485/views/index.py:7:0: W0611: Unused import re (unused-import)
insta485/views/index.py:8:0: W0611: Unused L imported from re (unused-import)
insta485/views/index.py:11:0: W0611: Unused empty imported from pyparsing (unused-import)
insta485/views/index.py:14:0: W0611: Unused import pdb (unused-import)
insta485/views/index.py:15:0: W0611: Unused import uuid (unused-import)
insta485/views/index.py:13:0: C0411: standard import "import sqlite3" should be placed before "import arrow" (wrong-import-order)
insta485/views/index.py:14:0: C0411: standard import "import pdb" should be placed before "import arrow" (wrong-import-order)
insta485/views/index.py:15:0: C0411: standard import "import uuid" should be placed before "import arrow" (wrong-import-order)
insta485/views/index.py:16:0: C0411: standard import "import hashlib" should be placed before "import arrow" (wrong-import-order)
************* Module insta485.views.__init__
insta485/views/__init__.py:2:0: C0304: Final newline missing (missing-final-newline)

------------------------------------------------------------------
Your code has been rated at 7.60/10 (previous run: 7.60/10, +0.00)

__________________________________ test_html ___________________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_html(client):
        """Validate generated HTML5 in insta485/templates/ ."""
        # Log in as awdeorio
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_style.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
________________________________ test_awdeorio _________________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_awdeorio(client):
        """Check default content at /users/awdeorio/ URL."""
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_user_public.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
_________________________________ test_upload __________________________________

client = <FlaskClient <Flask 'insta485'>>

    def test_upload(client):
        """Upload a new post verify that it shows up."""
        # Log in
>       response = client.post(
            "/accounts/",
            data={
                "username": "awdeorio",
                "password": "password",
                "operation": "login"
            },
        )

tests/test_user_public.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/werkzeug/test.py:1134: in post
    return self.open(*args, **kw)
env/lib/python3.10/site-packages/flask/testing.py:216: in open
    return super().open(  # type: ignore
env/lib/python3.10/site-packages/werkzeug/test.py:1074: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
env/lib/python3.10/site-packages/werkzeug/test.py:1231: in run_wsgi_app
    app_rv = app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
env/lib/python3.10/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
env/lib/python3.10/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
env/lib/python3.10/site-packages/flask/app.py:1519: in full_dispatch_request
    return self.finalize_request(rv)
env/lib/python3.10/site-packages/flask/app.py:1538: in finalize_request
    response = self.make_response(rv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'insta485'>, rv = None

    def make_response(self, rv: ResponseReturnValue) -> Response:
        """Convert the return value from a view function to an instance of
        :attr:`response_class`.
    
        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:
    
            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.
    
            ``bytes``
                A response object is created with the bytes as the body.
    
            ``dict``
                A dictionary that will be jsonify'd before being returned.
    
            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.
    
            :attr:`response_class`
                The object is returned unchanged.
    
            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.
    
            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.
    
        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        """
    
        status = headers = None
    
        # unpack tuple returns
        if isinstance(rv, tuple):
            len_rv = len(rv)
    
            # a 3-tuple is unpacked directly
            if len_rv == 3:
                rv, status, headers = rv
            # decide if a 2-tuple has status or headers
            elif len_rv == 2:
                if isinstance(rv[1], (Headers, dict, tuple, list)):
                    rv, headers = rv
                else:
                    rv, status = rv
            # other sized tuples are not allowed
            else:
                raise TypeError(
                    "The view function did not return a valid response tuple."
                    " The tuple must have the form (body, status, headers),"
                    " (body, status), or (body, headers)."
                )
    
        # the body must not be None
        if rv is None:
>           raise TypeError(
                f"The view function for {request.endpoint!r} did not"
                " return a valid response. The function either returned"
                " None or ended without a return statement."
            )
E           TypeError: The view function for 'handle_account' did not return a valid response. The function either returned None or ended without a return statement.

env/lib/python3.10/site-packages/flask/app.py:1701: TypeError
=========================== short test summary info ============================
FAILED tests/test_accounts_public.py::test_accounts_create - TypeError: The v...
FAILED tests/test_accounts_public.py::test_accounts_edit - TypeError: The vie...
FAILED tests/test_accounts_public.py::test_accounts_password - TypeError: The...
FAILED tests/test_accounts_public.py::test_accounts_delete - TypeError: The v...
FAILED tests/test_accounts_public.py::test_accounts_uploads_permission - asse...
FAILED tests/test_explore.py::test_awdeorio_default - TypeError: The view fun...
FAILED tests/test_explore.py::test_follow - TypeError: The view function for ...
FAILED tests/test_explore.py::test_empty - TypeError: The view function for '...
FAILED tests/test_followers_public.py::test_awdeorio_followers - TypeError: T...
FAILED tests/test_followers_public.py::test_files - TypeError: The view funct...
FAILED tests/test_followers_public.py::test_unfollow - TypeError: The view fu...
FAILED tests/test_followers_public.py::test_follow - TypeError: The view func...
FAILED tests/test_following.py::test_awdeorio - TypeError: The view function ...
FAILED tests/test_following.py::test_unfollow - TypeError: The view function ...
FAILED tests/test_following.py::test_not_following - TypeError: The view func...
FAILED tests/test_index.py::test_images - TypeError: The view function for 'h...
FAILED tests/test_index.py::test_links - TypeError: The view function for 'ha...
FAILED tests/test_index.py::test_likes - TypeError: The view function for 'ha...
FAILED tests/test_index.py::test_timestamps - TypeError: The view function fo...
FAILED tests/test_index.py::test_comments - TypeError: The view function for ...
FAILED tests/test_login_logout.py::test_index_redirect - assert 200 == 302
FAILED tests/test_login_logout.py::test_login_page_content - assert 405 == 200
FAILED tests/test_login_logout.py::test_login - TypeError: The view function ...
FAILED tests/test_login_logout.py::test_logout - TypeError: The view function...
FAILED tests/test_post_public.py::test_postid_1 - TypeError: The view functio...
FAILED tests/test_post_public.py::test_postid_2 - TypeError: The view functio...
FAILED tests/test_post_public.py::test_zero_likes_english - TypeError: The vi...
FAILED tests/test_post_public.py::test_delete_comment - TypeError: The view f...
FAILED tests/test_post_public.py::test_like_unlike - TypeError: The view func...
FAILED tests/test_post_public.py::test_duplicate_like_unlike - TypeError: The...
FAILED tests/test_post_public.py::test_comment - TypeError: The view function...
FAILED tests/test_post_public.py::test_delete_post - TypeError: The view func...
FAILED tests/test_scripts.py::test_insta485run - TypeError: The view function...
FAILED tests/test_style.py::test_pycodestyle - subprocess.CalledProcessError:...
FAILED tests/test_style.py::test_pydocstyle - subprocess.CalledProcessError: ...
FAILED tests/test_style.py::test_pylint - subprocess.CalledProcessError: Comm...
FAILED tests/test_style.py::test_html - TypeError: The view function for 'han...
FAILED tests/test_user_public.py::test_awdeorio - TypeError: The view functio...
FAILED tests/test_user_public.py::test_upload - TypeError: The view function ...
======================== 39 failed, 9 passed in 17.94s =========================
